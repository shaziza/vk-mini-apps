{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNumeric = isNumeric;\nexports.isFunction = isFunction;\nexports.hasReactNode = hasReactNode;\nexports.isPrimitiveReactNode = isPrimitiveReactNode;\nexports.setRef = setRef; // Является ли переданное значение числовым\n\nfunction isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n} // Является ли переданное значение функцией\n\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nfunction hasReactNode(value) {\n  return value !== undefined && value !== false && value !== null;\n}\n\nfunction isPrimitiveReactNode(node) {\n  return typeof node === 'string' || typeof node === 'number';\n}\n\nfunction setRef(element, ref) {\n  if (ref) {\n    if (typeof ref === 'function') {\n      ref(element);\n    } else {\n      ref.current = element;\n    }\n  }\n}","map":{"version":3,"sources":["../../src/lib/utils.ts"],"names":["isNaN","parseFloat","isFinite","value","ref"],"mappings":";;;;;;;;;yBAGA;;AACO,SAAA,SAAA,CAAA,KAAA,EAAwC;AAC7C,SAAO,CAACA,KAAK,CAACC,UAAU,CAAjB,KAAiB,CAAX,CAAN,IAA6BC,QAAQ,CAA5C,KAA4C,CAA5C;EAGF;;;AACO,SAAA,UAAA,CAAA,KAAA,EAAoE;AACzE,SAAO,OAAA,KAAA,KAAP,UAAA;AACD;;AAEM,SAAA,YAAA,CAAA,KAAA,EAAiD;AACtD,SAAOC,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAA5BA,KAAAA,IAA0CA,KAAK,KAAtD,IAAA;AACD;;AAEM,SAAA,oBAAA,CAAA,IAAA,EAAwD;AAC7D,SAAO,OAAA,IAAA,KAAA,QAAA,IAA4B,OAAA,IAAA,KAAnC,QAAA;AACD;;AAEM,SAAA,MAAA,CAAA,OAAA,EAAA,GAAA,EAAkD;AACvD,MAAA,GAAA,EAAS;AACP,QAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAC7BC,MAAAA,GAAG,CAAHA,OAAG,CAAHA;AADF,KAAA,MAEO;AACLA,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,OAAAA;AACD;AACF;AACF","sourcesContent":["import { ReactNode } from 'react';\nimport { Ref } from '../types';\n\n// Является ли переданное значение числовым\nexport function isNumeric(value: any): boolean {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\n// Является ли переданное значение функцией\nexport function isFunction(value: any): value is ((...args: any[]) => any) {\n  return typeof value === 'function';\n}\n\nexport function hasReactNode(value: ReactNode): boolean {\n  return value !== undefined && value !== false && value !== null;\n}\n\nexport function isPrimitiveReactNode(node: ReactNode): boolean {\n  return typeof node === 'string' || typeof node === 'number';\n}\n\nexport function setRef<T>(element: T, ref: Ref<T>): void {\n  if (ref) {\n    if (typeof ref === 'function') {\n      ref(element);\n    } else {\n      ref.current = element;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}